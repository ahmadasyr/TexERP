// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model personnel {
  id               Int       @id @default(autoincrement())
  firstName        String    @db.VarChar(50)
  lastName         String    @db.VarChar(50)
  position         String?   @db.VarChar(50)
  department       String?   @db.VarChar(50)
  dateOfHire       DateTime?
  email            String?   @db.VarChar(100)
  phone            String?   @db.VarChar(15)
  handleComplaints Boolean?
  handleSales      Boolean?

  customerMeetPlan    customerMeetPlan[]
  customerMeetReport  customerMeetReport[]
  complaintsDealt     customerComplaint[]  @relation("ref_dealingPersonnel")
  complaintsEvaluated customerComplaint[]  @relation("ref_evaluatingPersonnel")
}

// GENERAL SECTION

enum unit {
  m
  kg
}

enum wayOfMeeting {
  Telefon
  Email
  FaceToFace
}

// enum validPeriodType {
//   Ay
//   Hafta
//   Gün
// }

enum offerStatus {
  Verilecek
  Red
  Onaylandi
  Beklemede
}

// enum visitReason {
//   PazarlamaFaaliyeti
//   RutinZiyaret
//   Şikayet
//   Diğer
// }

enum customerStatus {
  Mevcut
  Potansiyel
  Riskli
  Kara_Liste
}

enum shippingMethod {
  Fabricadan
  Depodan
  Limana
  EXW
  FCA
  CPT
  CIP
  DAT
  DAP
  DDP
  FAS
  FOB
  CFR
  CIF
}

// enum paymentKind {
//   nakit
//   cheque
//   havale
// }

model taxOffice {
  id       Int        @id @default(autoincrement())
  name     String
  city     String
  customer customer[]
}

model bank {
  id       Int        @id @default(autoincrement())
  name     String
  customer customer[]
}

model currency {
  id              Int             @id @default(autoincrement())
  name            String
  code            String          @db.Char(3)
  rate            Float
  exchangePercent Float
  customer        customer[]
  customerPrice   customerPrice[]
  offer           offer[]
}

// SALES SECTION

model customer {
  id                Int            @id @default(autoincrement())
  name              String
  foreign           Boolean
  relatedPerson     String
  title             String
  email             String
  phoneNumber       String
  firstOffer        DateTime
  salesPersonId     Int?
  firstRegisterDate DateTime
  status            customerStatus
  returnDate        DateTime
  salesOpinion      String
  creditNote        String
  shippingMethod    shippingMethod
  meterLimit        Float
  address           String
  city              String
  taxOfficeId       Int
  taxNumber         String
  paymentKind       String
  note              String
  bankId            Int
  currencyId        Int
  iban              String
  swift             String

  // Relations
  taxOffice              taxOffice                @relation(fields: [taxOfficeId], references: [id])
  bank                   bank                     @relation(fields: [bankId], references: [id])
  currency               currency                 @relation(fields: [currencyId], references: [id])
  customerMeetPlan       customerMeetPlan[]
  customerMeetReport     customerMeetReport[]
  customerPrice          customerPrice[]
  offer                  offer[]
  order                  order[]
  productFeasibilityForm productFeasibilityForm[]
}

model customerMeetPlan {
  id                   Int      @id @default(autoincrement())
  customerId           Int
  country              String
  visitReason          String
  plannedDate          DateTime
  realDate             DateTime
  visitingPersonnelId  Int
  result               String
  accuracyRate         Float
  note                 String
  travelExpense        Float
  accommodationExpense Float
  foodExpense          Float
  giftExpense          Float
  officeExpense        Float

  // Relations
  customer          customer  @relation(fields: [customerId], references: [id])
  visitingPersonnel personnel @relation(fields: [visitingPersonnelId], references: [id])
}

model customerMeetReport {
  id                 Int      @id @default(autoincrement())
  revisionDate       DateTime
  meetDate           DateTime
  personnelId        Int
  visitReason        String
  customerId         Int
  city               String
  district           String
  peopleMet          Json
  wayOfMeeting       String
  contentsOfMeeting  String
  customerNote       String
  responseToCustomer String

  // Relations
  customer  customer  @relation(fields: [customerId], references: [id])
  personnel personnel @relation(fields: [personnelId], references: [id])
}

model competitorReport {
  id                      Int                       @id @default(autoincrement())
  competitorName          String
  date                    DateTime
  competitorReportContent competitorReportContent[]
}

model competitionReportSubject {
  id                      Int                       @id @default(autoincrement())
  name                    String
  competitorReportContent competitorReportContent[]
}

model competitorReportContent {
  id                         Int     @id @default(autoincrement())
  competitorReportId         Int
  competitionReportSubjectId Int
  exists                     Boolean
  status                     String
  gap                        String
  strategy                   String
  action                     String

  // Relations
  competitorReport         competitorReport         @relation(fields: [competitorReportId], references: [id])
  competitionReportSubject competitionReportSubject @relation(fields: [competitionReportSubjectId], references: [id])
}

model customerPrice {
  id         Int      @id @default(autoincrement())
  date       DateTime
  customerId Int
  productId  Int
  currencyId Int
  price      Float
  unit       unit

  // Relations
  customer customer @relation(fields: [customerId], references: [id])
  product  product  @relation(fields: [productId], references: [id])
  currency currency @relation(fields: [currencyId], references: [id])
}

model offer {
  id                 Int            @id @default(autoincrement())
  offerNo            Int
  saleNo             Int
  offerDate          DateTime
  customerId         Int
  date               DateTime
  proformaNo         Int
  requestNo          Int
  requestDate        DateTime
  requestDeadline    DateTime
  requestBudget      Float
  productId          Int
  specification      String
  detail             String
  quantity           Float
  unit               unit
  price              Float
  currencyId         Int
  vat                Float
  total              Float
  maturity           Int
  daysDue            Int
  deadlineDate       DateTime
  specialRequirement String
  deliveryAddress    String
  shippingMethod     shippingMethod
  proformaDetails    String
  packingListNo      Int
  additionalTerms    String
  validPeriod        Int
  validPeriodType    String // Replace with actual enum (ay, hafta, gün)
  conditions         Json
  lastValidityDate   DateTime
  acceptanceDate     DateTime
  rejectionDate      DateTime
  status             String // Replace with actual enum (Verilecek, Red, onaylandi, beklemede)
  meetNote           String
  lastMeetDate       DateTime
  meetStatement      String
  totalKDV           Float

  // Relations
  customer customer @relation(fields: [customerId], references: [id])
  product  product  @relation(fields: [productId], references: [id])
  currency currency @relation(fields: [currencyId], references: [id])
}

model order {
  id              Int      @id @default(autoincrement())
  orderNo         String
  customerId      Int
  index           Int
  productId       Int
  quantity        Float
  unit            unit
  deliveryAddress String
  acceptanceDate  DateTime
  specifications  String
  details         String

  // Relations
  customer customer @relation(fields: [customerId], references: [id])
  product  product  @relation(fields: [productId], references: [id])
}

model customerComplaint {
  id                    Int      @id @default(autoincrement())
  date                  DateTime
  subject               String
  productId             Int
  packagingDate         DateTime
  complaintDetails      String
  dealingPersonnelId    Int
  dealingDate           DateTime
  evaluatingPersonnelId Int
  actionTaken           String
  dofNo                 Int
  result                String

  // Relations
  product             product   @relation(fields: [productId], references: [id])
  dealingPersonnel    personnel @relation("ref_dealingPersonnel", fields: [dealingPersonnelId], references: [id])
  evaluatingPersonnel personnel @relation("ref_evaluatingPersonnel", fields: [evaluatingPersonnelId], references: [id])
}

model productFeasibilityForm {
  id                     Int      @id @default(autoincrement())
  date                   DateTime
  attendees              Json
  productName            String
  customerId             Int
  yearlyProductionCount  Int
  startDateGoal          DateTime
  productPriceGoal       Float
  marketReady            Boolean
  demandReady            Boolean
  legalReady             Boolean
  testReady              Boolean
  productionReady        Boolean
  measurementReady       Boolean
  rawMaterialCost        Float
  productionCost         Float
  process                Json
  material               Json
  auxEquipment           Json
  machine                Json
  costs                  Json
  cost                   Float
  customerBudget         Float
  priceDifferencePercent Float
  suitable               Boolean
  costsCovered           Boolean

  // Relations
  customer customer @relation(fields: [customerId], references: [id])
}

model product {
  id                Int                 @id @default(autoincrement())
  code              String
  name              String
  customerPrice     customerPrice[]
  offer             offer[]
  order             order[]
  customerComplaint customerComplaint[]
}
