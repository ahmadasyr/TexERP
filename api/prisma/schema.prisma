// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum department {
  admin
  yon
  iys
  ika
  kal
  pln
  stn
  sts
  urt
  sev
  dep
  coz
  orm
  dok
  kalf
  kes
  muh
}

model personnel {
  id               Int         @id @default(autoincrement())
  supervisorId     Int?
  firstName        String?     @db.VarChar(50)
  lastName         String?     @db.VarChar(50)
  position         String?     @db.VarChar(50)
  // department       String?    @db.VarChar(50)
  dateOfHire       DateTime?
  email            String?     @unique @db.VarChar(100)
  phone            String?     @db.VarChar(15)
  handleComplaints Boolean?
  handleSales      Boolean?
  password         String
  username         String?     @unique
  department       department?
  isDepartmentHead Boolean?
  buyingLimit      Float?      @default(0)

  // Relations
  supervisor                personnel?                  @relation("supervisor", fields: [supervisorId], references: [id])
  customerMeetReport        customerMeetReport[]
  complaintsDealt           customerComplaint[]         @relation("ref_dealingPersonnel")
  complaintsEvaluated       customerComplaint[]         @relation("ref_evaluatingPersonnel")
  customer                  customer[]
  wrapOrder                 wrapOrder[]
  productionOrder           productionOrder[]
  dyeOrder                  dyeOrder[]
  dyeShipmentItem           dyeShipmentItem[]
  outsourceShipmentItem     outsourceShipmentItem[]
  order                     order[]
  orderShipmentItem         orderShipmentItem[]
  orderShipmentConfirmation orderShipmentConfirmation[]

  dyeOrderItem dyeOrderItem[]

  outsourceOrderItem outsourceOrderItem[]

  orderShipment            orderShipment[]
  wrapStock                wrapStock[]
  yarnStockEntry           yarnStockEntry[]
  yarnType                 yarnType[]
  yarnOrderItem            yarnOrderItem[]
  yarnOrderShipment        yarnOrderShipment[]
  yarnOrderShipmentItem    yarnOrderShipmentItem[]
  yarnOrder                yarnOrder[]
  yarnOrderShipmentSent    yarnOrderShipmentSent[]
  productPrice             productPrice[]
  customerPrice            customerPrice[]
  fromPersonnel            dofiRequest[]              @relation("fromPersonnelRelation")
  toPersonnel              dofiRequest[]              @relation("toPersonnelRelation")
  followedPersonnel        dofiRequest[]              @relation("followedPersonnelRelation")
  log                      log[]
  offer                    offer[]
  notification             notification[]
  customerMeetPlanAttendee customerMeetPlanAttendee[]
  reportIssue              reportIssue[]
  purchaseDelivery         purchaseDelivery[]
  purchaseDeliveryItem     purchaseDeliveryItem[]
  subordinate              personnel[]                @relation("supervisor")
  purchaseOrder            purchaseOrder[]
  purchaseOrderItem        purchaseOrderItem[]
  warehouse                warehouse[]
  materialStock            materialStock[]
  movedMaterialStock       materialStock[]            @relation("MovedPersonnelRelation")
  supplierEvaluation       supplierEvaluation[]
  purchaseRequest          purchaseRequest[]
  stock                    stock[]
  dyeConfirmation          dyeConfirmation[]
  dyeShipment              dyeShipment[]
  outsourceShipment        outsourceShipment[]
  outsourceConfirmation    outsourceConfirmation[]
  outsourceOrder           outsourceOrder[]
}

// GENERAL SECTION

enum unit {
  m
  kg
}

enum wayOfMeeting {
  Telefon
  Email
  FaceToFace
}

// enum validPeriodType {
//   Ay
//   Hafta
//   Gün
// }

enum offerStatus {
  Verilecek
  Red
  Onaylandi
  Beklemede
}

// enum visitReason {
//   PazarlamaFaaliyeti
//   RutinZiyaret
//   Şikayet
//   Diğer
// }

enum shippingMethod {
  Fabrikadan
  Depodan
  Limana
  EXW
  FCA
  CPT
  CIP
  DAT
  DAP
  DDP
  FAS
  FOB
  CFR
  CIF
}

// enum paymentKind {
//   nakit
//   cheque
//   havale
// }

model taxOffice {
  id       Int        @id @default(autoincrement())
  name     String
  city     String
  customer customer[]
  account  account[]
  supplier supplier[]
}

model bank {
  id       Int        @id @default(autoincrement())
  name     String
  customer customer[]
}

model currency {
  id                Int                 @id @default(autoincrement())
  name              String
  code              String              @db.Char(3)
  rate              Float
  exchangePercent   Float?
  customer          customer[]
  customerPrice     customerPrice[]
  yarnType          yarnType[]
  yarnOrderItem     yarnOrderItem[]
  productPrice      productPrice[]
  account           account[]
  materialPrice     materialPrice[]
  purchaseOrderItem purchaseOrderItem[]
}

// SALES SECTION

model customer {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  foreign           Boolean
  relatedPerson     String?
  title             String?
  email             String?
  phoneNumber       String?
  firstOfferDate    DateTime?
  personnelId       Int
  firstRegisterDate DateTime?       @default(now())
  status            String
  returnDate        DateTime?
  salesOpinion      String?
  creditNote        String?
  shippingMethod    shippingMethod?
  meterLimit        Float?
  address           String?
  city              String
  taxOfficeId       Int?
  taxNumber         String?
  paymentKind       String?
  note              String?
  bankId            Int?
  currencyId        Int?
  iban              String?
  swift             String?
  accountId         Int?            @unique

  // Relations
  taxOffice              taxOffice?               @relation(fields: [taxOfficeId], references: [id])
  bank                   bank?                    @relation(fields: [bankId], references: [id])
  currency               currency?                @relation(fields: [currencyId], references: [id])
  personnel              personnel                @relation(fields: [personnelId], references: [id])
  customerMeetReport     customerMeetReport[]
  customerPrice          customerPrice[]
  order                  order[]
  productFeasibilityForm productFeasibilityForm[]

  customerComplaint        customerComplaint[]
  account                  account?                   @relation(fields: [accountId], references: [id])
  customerMeetPlanCustomer customerMeetPlanCustomer[]
}

model competitor {
  id               Int                @id @default(autoincrement())
  name             String
  competitorReport competitorReport[]
}

model customerMeetPlan {
  id                       Int                        @id @default(autoincrement())
  location                 String
  visitReason              String
  plannedDate              DateTime
  realDate                 DateTime?
  returnDate               DateTime?
  result                   String?
  note                     String?
  travelExpense            Float?
  accommodationExpense     Float?
  foodExpense              Float?
  giftExpense              Float?
  officeExpense            Float?
  sampleExpense            Float?
  customerMeetPlanAttendee customerMeetPlanAttendee[]
  customerMeetPlanCustomer customerMeetPlanCustomer[]
}

model customerMeetPlanAttendee {
  id                 Int @id @default(autoincrement())
  customerMeetPlanId Int
  personnelId        Int

  // Relations
  customerMeetPlan customerMeetPlan @relation(fields: [customerMeetPlanId], references: [id])
  personnel        personnel        @relation(fields: [personnelId], references: [id])

  @@unique([customerMeetPlanId, personnelId])
}

model customerMeetPlanCustomer {
  id                 Int     @id @default(autoincrement())
  customerId         Int
  customerMeetPlanId Int
  note               String?

  // Relations
  customerMeetPlan customerMeetPlan @relation(fields: [customerMeetPlanId], references: [id])
  customer         customer         @relation(fields: [customerId], references: [id])

  @@unique([customerId, customerMeetPlanId])
}

model customerMeetReport {
  id                 Int      @id @default(autoincrement())
  revisionDate       DateTime
  meetDate           DateTime
  personnelId        Int
  visitReason        String
  customerId         Int
  city               String
  district           String
  peopleMet          Json
  wayOfMeeting       String
  contentsOfMeeting  String
  customerNote       String?
  responseToCustomer String?

  // Relations
  customer  customer  @relation(fields: [customerId], references: [id])
  personnel personnel @relation(fields: [personnelId], references: [id])
}

model competitorReport {
  id                      Int                       @id @default(autoincrement())
  competitorId            Int
  date                    DateTime
  competitorReportContent competitorReportContent[]

  // Relations
  competitor competitor @relation(fields: [competitorId], references: [id])
}

model competitionReportSubject {
  id                      Int                       @id @default(autoincrement())
  name                    String
  competitorReportContent competitorReportContent[]
}

model competitorReportContent {
  id                         Int     @id @default(autoincrement())
  competitorReportId         Int
  competitionReportSubjectId Int
  exists                     Boolean
  status                     String
  gap                        String
  strategy                   String
  action                     String

  // Relations
  competitorReport         competitorReport         @relation(fields: [competitorReportId], references: [id])
  competitionReportSubject competitionReportSubject @relation(fields: [competitionReportSubjectId], references: [id])
}

model customerPrice {
  id              Int       @id @default(autoincrement())
  date            DateTime? @default(now())
  customerId      Int
  productId       Int
  currencyId      Int
  upfront         Float
  price           Float
  installment     Float
  unit            unit
  personnelId     Int
  outsourceTypeId Int?

  // Relations
  customer      customer       @relation(fields: [customerId], references: [id])
  product       product        @relation(fields: [productId], references: [id])
  currency      currency       @relation(fields: [currencyId], references: [id])
  personnel     personnel?     @relation(fields: [personnelId], references: [id])
  outsourceType outsourceType? @relation(fields: [outsourceTypeId], references: [id])
}

model offer {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime? @default(now())
  orderId     Int?
  personnelId Int

  // payment deadline
  paymentDue Int // to pay

  // product delivery deadline
  deliveryDeadlineDate DateTime

  // offer valid period
  validPeriod      Int
  validPeriodType  String // Replace with actual enum (ay, hafta, gün)
  lastValidityDate DateTime

  additionalTerms Json?
  conditions      Json?

  total               Float
  totalKDV            Float
  customerTargetPrice Float?

  detail        String?
  meetStatement String?

  meetNote     String?
  status       offerStatus
  responseDate DateTime?
  // Relations
  order        order?      @relation(fields: [orderId], references: [id])
  offerItem    offerItem[]
  personnel    personnel   @relation(fields: [personnelId], references: [id])
}

model offerItem {
  id          Int       @id @default(autoincrement())
  offerId     Int
  orderItemId Int
  price       Float
  vatRate     Float
  total       Float
  totalVat    Float
  vade        Int?
  // Relations
  offer       offer     @relation(fields: [offerId], references: [id])
  orderItem   orderItem @relation(fields: [orderItemId], references: [id])
}

model customerComplaint {
  id                    Int       @id @default(autoincrement())
  date                  DateTime  @default(now())
  subject               String
  customerId            Int
  productId             Int?
  packagingDate         DateTime?
  complaintDetails      String
  dealingPersonnelId    Int
  dealingDate           DateTime
  evaluatingPersonnelId Int?
  actionTaken           String?
  dofNo                 Int?
  result                String?
  orderId               Int?
  lot                   String?

  // Relations
  customer            customer   @relation(fields: [customerId], references: [id])
  product             product?   @relation(fields: [productId], references: [id])
  dealingPersonnel    personnel  @relation("ref_dealingPersonnel", fields: [dealingPersonnelId], references: [id])
  evaluatingPersonnel personnel? @relation("ref_evaluatingPersonnel", fields: [evaluatingPersonnelId], references: [id])
  order               order?     @relation(fields: [orderId], references: [id])
}

model productFeasibilityForm {
  id                     Int       @id @default(autoincrement())
  date                   DateTime? @default(now())
  attendees              Json?
  productName            String
  customerId             Int
  yearlyProductionCount  Int?
  startDateGoal          DateTime?
  productPriceGoal       Float
  marketReady            Boolean?
  demandReady            Boolean?
  legalReady             Boolean?
  testReady              Boolean?
  productionReady        Boolean?
  measurementReady       Boolean?
  rawMaterialCost        Float?
  productionCost         Float?
  process                Json?
  material               Json?
  auxEquipment           Json?
  machine                Json?
  costs                  Json?
  cost                   Float?
  customerBudget         Float?
  priceDifferencePercent Float?
  suitable               Boolean?
  costsCovered           Boolean?

  // Relations
  customer customer @relation(fields: [customerId], references: [id])
}

model account {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  accountTypeId Int?
  taxOfficeId   Int?
  taxNumber     String?
  currencyId    Int?
  debit         Float     @default(0)
  credit        Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  // Relations
  taxOffice   taxOffice?   @relation(fields: [taxOfficeId], references: [id])
  currency    currency?    @relation(fields: [currencyId], references: [id])
  accountType accountType? @relation(fields: [accountTypeId], references: [id])
  customer    customer[]
  yarnOrder   yarnOrder[]
  supplier    supplier[]
}

model accountType {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  code    String    @unique
  account account[]
}

// production and planning section

model productType {
  id           Int       @id @default(autoincrement())
  name         String
  needsCutting Boolean
  specsGroup   Json? // array of strings to be used as keys
  product      product[]
}

model product {
  id                Int                 @id @default(autoincrement())
  name              String
  productTypeId     Int?
  specs             Json? // object with keys from productType.specsGroup
  customerPrice     customerPrice[]
  customerComplaint customerComplaint[]
  productionOrder   productionOrder[]

  outsourceOrderItem outsourceOrderItem[]

  orderItem    orderItem[]
  productPrice productPrice[]
  productWrap  productWrap[]
  productType  productType?   @relation(fields: [productTypeId], references: [id])
  stock        stock[]
  dyeOrder     dyeOrder[]
}

enum ProductionSide {
  HavA
  HavB
  ZeminA
  ZeminB
  FranceA
  FranceB
}

model productWrap {
  id         Int            @id @default(autoincrement())
  productId  Int
  wrapTypeId Int
  salimMeter Float
  side       ProductionSide

  // Relations
  product  product  @relation(fields: [productId], references: [id])
  wrapType wrapType @relation(fields: [wrapTypeId], references: [id])
}

model productPrice {
  id              Int      @id @default(autoincrement())
  productId       Int
  outsourceTypeId Int?
  upfront         Float
  price           Float
  installment     Float
  currencyId      Int
  date            DateTime @default(now())
  unit            unit
  personnelId     Int

  // Relations
  product       product        @relation(fields: [productId], references: [id])
  currency      currency       @relation(fields: [currencyId], references: [id])
  personnel     personnel      @relation(fields: [personnelId], references: [id])
  outsourceType outsourceType? @relation(fields: [outsourceTypeId], references: [id])
}

// Yarn Section
model yarnType {
  id          Int       @id @default(autoincrement())
  name        String
  count       Float
  unit        String
  color       String
  colorCode   String
  price       Float?
  currencyId  Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  personnelId Int

  // Relations
  currency      currency?        @relation(fields: [currencyId], references: [id])
  yarnStock     yarnStockEntry[]
  wrapOrder     wrapOrder[]
  personnel     personnel        @relation(fields: [personnelId], references: [id])
  yarnOrderItem yarnOrderItem[]
}

model yarnStockEntry {
  id                    Int                     @id @default(autoincrement())
  yarnTypeId            Int
  createdAt             DateTime                @default(now())
  lot                   String
  entryKg               Float
  entryCount            Int
  netKg                 Float
  count                 Int
  waybillNo             String?
  personnelId           Int
  yarnOrderId           Int?
  warehouseId           Int?
  // Relations
  yarnType              yarnType                @relation(fields: [yarnTypeId], references: [id])
  personnel             personnel               @relation(fields: [personnelId], references: [id])
  yarnOrderShipmentSent yarnOrderShipmentSent[]
  yarnOrder             yarnOrder?              @relation(fields: [yarnOrderId], references: [id])
  warehouse             warehouse?              @relation(fields: [warehouseId], references: [id])
}

model yarnOrder {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  accountId   Int
  sale        Boolean
  description String
  personnelId Int
  closed      Boolean  @default(false)

  // Relations
  account           account             @relation(fields: [accountId], references: [id])
  personnel         personnel           @relation(fields: [personnelId], references: [id])
  yarnOrderItem     yarnOrderItem[]
  yarnOrderShipment yarnOrderShipment[]
  yarnStockEntry    yarnStockEntry[]
}

model yarnOrderItem {
  id                    Int                     @id @default(autoincrement())
  yarnOrderId           Int
  yarnTypeId            Int
  kg                    Float
  price                 Float
  lot                   String?
  currencyId            Int
  personnelId           Int
  // Relations
  yarnOrder             yarnOrder               @relation(fields: [yarnOrderId], references: [id])
  yarnType              yarnType                @relation(fields: [yarnTypeId], references: [id])
  currency              currency                @relation(fields: [currencyId], references: [id])
  personnel             personnel               @relation(fields: [personnelId], references: [id])
  yarnOrderShipmentItem yarnOrderShipmentItem[]
  yarnOrderShipmentSent yarnOrderShipmentSent[]
}

model yarnOrderShipment {
  id                Int       @id @default(autoincrement())
  yarnOrderId       Int
  createdAt         DateTime  @default(now())
  sentDate          DateTime?
  closed            Boolean   @default(false)
  shippingCompanyId Int?
  shippingCarrierId Int?
  shippingCarId     Int?
  personnelId       Int

  // Relations
  yarnOrder             yarnOrder               @relation(fields: [yarnOrderId], references: [id])
  shippingCompany       shippingCompany?        @relation(fields: [shippingCompanyId], references: [id])
  shippingCarrier       shippingCarrier?        @relation(fields: [shippingCarrierId], references: [id])
  shippingCar           shippingCar?            @relation(fields: [shippingCarId], references: [id])
  personnel             personnel               @relation(fields: [personnelId], references: [id])
  yarnOrderShipmentItem yarnOrderShipmentItem[]
  yarnOrderShipmentSent yarnOrderShipmentSent[]
}

model yarnOrderShipmentItem {
  id                  Int   @id @default(autoincrement())
  personnelId         Int
  yarnOrderShipmentId Int
  yarnOrderItemId     Int
  sentKg              Float
  sentCount           Int

  //  Relations
  personnel         personnel         @relation(fields: [personnelId], references: [id])
  yarnOrderShipment yarnOrderShipment @relation(fields: [yarnOrderShipmentId], references: [id])
  yarnOrderItem     yarnOrderItem     @relation(fields: [yarnOrderItemId], references: [id])
}

model yarnOrderShipmentSent {
  id                  Int   @id @default(autoincrement())
  yarnOrderShipmentId Int
  yarnOrderItemId     Int
  yarnStockEntryId    Int
  sentKg              Float
  sentCount           Int
  personnelId         Int

  // Relations
  yarnOrderShipment yarnOrderShipment @relation(fields: [yarnOrderShipmentId], references: [id])
  yarnOrderItem     yarnOrderItem     @relation(fields: [yarnOrderItemId], references: [id])
  yarnStockEntry    yarnStockEntry    @relation(fields: [yarnStockEntryId], references: [id])
  personnel         personnel         @relation(fields: [personnelId], references: [id])
}

// Machine Section
model machineType {
  id      Int       @id @default(autoincrement())
  name    String
  machine machine[]
}

enum machineStatus {
  Tamamlandi
  Uretimde
  Beklemede
}

model machine {
  id            Int    @id @default(autoincrement())
  name          String
  machineTypeId Int

  machineType     machineType       @relation(fields: [machineTypeId], references: [id])
  wrapOrder       wrapOrder[]
  productionOrder productionOrder[]
}

// Wrap Section
model wrapGroup {
  id       Int        @id @default(autoincrement())
  name     String
  wrapType wrapType[]
}

model wrapType {
  id          Int    @id @default(autoincrement())
  name        String
  wrapGroupId Int?
  stringCount Int
  en          Float

  wrapGroup   wrapGroup?    @relation(fields: [wrapGroupId], references: [id])
  wrapOrder   wrapOrder[]
  productWrap productWrap[]
}

model wrapOrder {
  id          Int           @id @default(autoincrement())
  wrapTypeId  Int
  yarnTypeId  Int
  yarnLot     String
  wrapMeter   Float
  createdAt   DateTime      @default(now())
  startDate   DateTime
  machineId   Int
  status      machineStatus
  personnelId Int
  requiredKg  Float

  // Relations
  wrapType  wrapType    @relation(fields: [wrapTypeId], references: [id])
  yarnType  yarnType    @relation(fields: [yarnTypeId], references: [id])
  machine   machine     @relation(fields: [machineId], references: [id])
  personnel personnel   @relation(fields: [personnelId], references: [id])
  wrapStock wrapStock[]
}

enum wrapStockStatus {
  Depoda
  Kullanildi
}

model wrapStock {
  id                Int             @id @default(autoincrement())
  wrapOrderId       Int
  meter             Float
  exitDate          DateTime?
  productionOrderId Int?
  loopCount         Int
  status            wrapStockStatus
  personnelId       Int

  // Relations
  wrapOrder           wrapOrder             @relation(fields: [wrapOrderId], references: [id])
  productionOrder     productionOrder?      @relation(fields: [productionOrderId], references: [id])
  productionOrderWrap productionOrderWrap[]
  personnel           personnel             @relation(fields: [personnelId], references: [id])
}

// Production Section
model productionOrder {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  startDate   DateTime?
  machineId   Int
  status      machineStatus
  productId   Int
  lot         String
  meter       Float
  personnelId Int
  note        String?

  // Relations
  machine   machine   @relation(fields: [machineId], references: [id])
  product   product   @relation(fields: [productId], references: [id])
  personnel personnel @relation(fields: [personnelId], references: [id])

  wraps               wrapStock[]
  productionOrderWrap productionOrderWrap[]
  stock               stock[]
}

model productionOrderWrap {
  id                Int @id @default(autoincrement())
  productionOrderId Int
  wrapStockId       Int

  // Relations
  productionOrder productionOrder @relation(fields: [productionOrderId], references: [id])
  wrapStock       wrapStock       @relation(fields: [wrapStockId], references: [id])
}

enum cutStockStatus {
  Depoda
  Kesildi
}

enum stockStatus {
  PRE_CUT
  RAW_PRE_QUALITY
  RAW_QUALITY
  DYE_HOUSE
  DYE_PRE_QUALITY
  DYE_QUALITY
  OUTSOURCING
  LAMINATED_PRE_QUALITY
  LAMINATED_QUALITY
  COVER_QUALITY
}

// Stock Section
model stock {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // product data
  productId         Int
  lot               String?
  meter             Float
  kg                Float
  count             Int?        @default(1)
  yon               Boolean?
  status            stockStatus
  quality           Int?
  qualityNote       String?
  dyeColorId        Int?
  dyeTypeId         Int?
  laminationColorId Int?
  productionOrderId Int?
  originStockId     Int?
  // warehouse data
  counted           Boolean?
  countDate         DateTime?
  shelf             String?
  barcode           String?     @unique
  sold              Boolean?    @default(false)
  kazanNo           String?

  // general data
  note        String?
  personnelId Int

  // Relations
  originStock               stock?                      @relation("origin", fields: [originStockId], references: [id])
  product                   product                     @relation(fields: [productId], references: [id])
  personnel                 personnel                   @relation(fields: [personnelId], references: [id])
  dyeColor                  dyeColor?                   @relation(fields: [dyeColorId], references: [id])
  dyeType                   dyeType?                    @relation(fields: [dyeTypeId], references: [id])
  laminationColor           laminationColor?            @relation(fields: [laminationColorId], references: [id])
  productionOrder           productionOrder?            @relation(fields: [productionOrderId], references: [id])
  orderShipmentConfirmation orderShipmentConfirmation[]
  stockSpecifications       stockSpecifications[]
  dyeShipmentItem           dyeShipmentItem[]
  dyeConfirmation           dyeConfirmation[]
  outsourceShipmentItem     outsourceShipmentItem[]
  outsourceConfirmation     outsourceConfirmation[]
  stock                     stock[]                     @relation("origin")
}

model stockSpecifications {
  id          Int @id @default(autoincrement())
  stockId     Int
  outsourceId Int

  // Relations
  stock     stock         @relation(fields: [stockId], references: [id])
  outsource outsourceType @relation(fields: [outsourceId], references: [id])

  @@unique([stockId, outsourceId])
}

// Outsource Section

model dyeType {
  id           Int            @id @default(autoincrement())
  name         String
  dyeOrderItem dyeOrderItem[]
  stock        stock[]
}

model dyeColor {
  id                 Int                  @id @default(autoincrement())
  name               String
  dyeOrderItem       dyeOrderItem[]
  orderItem          orderItem[]
  stock              stock[]
  outsourceOrderItem outsourceOrderItem[]
}

model outsourceGroup {
  id            Int             @id @default(autoincrement())
  name          String
  outsourceType outsourceType[]
}

model outsourceType {
  id                    Int    @id @default(autoincrement())
  name                  String
  parentOutsourceTypeId Int?
  outsourceGroupId      Int?

  // Relations
  outsourceOrder      outsourceOrder[]
  orderItemSpecs      orderItemSpecification[]
  outsourceGroup      outsourceGroup?          @relation(fields: [outsourceGroupId], references: [id])
  parentOutsourceType outsourceType?           @relation("parentOutsourceType", fields: [parentOutsourceTypeId], references: [id])

  outsourceType       outsourceType[]       @relation("parentOutsourceType")
  productPrice        productPrice[]
  customerPrice       customerPrice[]
  stockSpecifications stockSpecifications[]
}

model laminationColor {
  id   Int    @id @default(autoincrement())
  name String

  orderItem          orderItem[]
  stock              stock[]
  outsourceOrderItem outsourceOrderItem[]
}

model dyeOrder {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  supplierId  Int
  productId   Int
  stockStatus stockStatus

  personnelId Int
  description String?
  closed      Boolean @default(false)

  // Relations
  supplier     supplier       @relation(fields: [supplierId], references: [id])
  personnel    personnel      @relation(fields: [personnelId], references: [id])
  dyeOrderItem dyeOrderItem[]
  dyeShipment  dyeShipment[]
  product      product        @relation(fields: [productId], references: [id])
}

model dyeOrderItem {
  id          Int      @id @default(autoincrement())
  dyeOrderId  Int
  dyeColorId  Int
  dyeTypeId   Int
  lot         String
  yon         Boolean?
  unit        unit
  quantity    Float
  kazanNo     String
  note        String?
  personnelId Int

  dyeOrder        dyeOrder          @relation(fields: [dyeOrderId], references: [id])
  dyeColor        dyeColor          @relation(fields: [dyeColorId], references: [id])
  dyeType         dyeType           @relation(fields: [dyeTypeId], references: [id])
  personnel       personnel         @relation(fields: [personnelId], references: [id])
  dyeShipmentItem dyeShipmentItem[]
  dyeConfirmation dyeConfirmation[]
}

model dyeShipment {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  personnelId       Int
  sentDate          DateTime?
  dyeOrderId        Int
  closed            Boolean   @default(false)
  shippingCompanyId Int?
  shippingCarrierId Int?
  shippingCarId     Int?

  // Relations
  dyeOrder        dyeOrder          @relation(fields: [dyeOrderId], references: [id])
  personnel       personnel         @relation(fields: [personnelId], references: [id])
  dyeShipmentItem dyeShipmentItem[]
  shippingCompany shippingCompany?  @relation(fields: [shippingCompanyId], references: [id])
  shippingCarrier shippingCarrier?  @relation(fields: [shippingCarrierId], references: [id])
  shippingCar     shippingCar?      @relation(fields: [shippingCarId], references: [id])
}

model dyeShipmentItem {
  id             Int          @id @default(autoincrement())
  dyeShipmentId  Int
  dyeOrderItemId Int
  stockId        Int
  personnelId    Int
  meter          Float
  kg             Float
  count          Int
  // Relations
  personnel      personnel    @relation(fields: [personnelId], references: [id])
  dyeShipment    dyeShipment  @relation(fields: [dyeShipmentId], references: [id])
  dyeOrderItem   dyeOrderItem @relation(fields: [dyeOrderItemId], references: [id])
  stock          stock        @relation(fields: [stockId], references: [id])
}

model dyeConfirmation {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  dyeOrderItemId Int
  stockId        Int
  meter          Float
  kg             Float
  count          Int
  personnelId    Int

  // relations
  dyeOrderItem dyeOrderItem @relation(fields: [dyeOrderItemId], references: [id])
  stock        stock        @relation(fields: [stockId], references: [id])
  personnel    personnel    @relation(fields: [personnelId], references: [id])
}

model outsourceOrder {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  supplierId      Int
  outsourceTypeId Int
  stockStatus     stockStatus
  description     String?
  personnelId     Int
  closed          Boolean     @default(false)

  // Relations
  supplier           supplier             @relation(fields: [supplierId], references: [id])
  personnel          personnel            @relation(fields: [personnelId], references: [id])
  outsourceType      outsourceType        @relation(fields: [outsourceTypeId], references: [id])
  outsourceOrderItem outsourceOrderItem[]
  outsourceShipment  outsourceShipment[]
}

model outsourceOrderItem {
  id                Int     @id @default(autoincrement())
  outsourceOrderId  Int
  productId         Int
  dyeColorId        Int?
  laminationColorId Int?
  quantity          Float
  unit              unit
  note              String?
  personnelId       Int

  // Relations
  dyeColor              dyeColor?               @relation(fields: [dyeColorId], references: [id])
  laminationColor       laminationColor?        @relation(fields: [laminationColorId], references: [id])
  outsourceOrder        outsourceOrder          @relation(fields: [outsourceOrderId], references: [id])
  product               product                 @relation(fields: [productId], references: [id])
  personnel             personnel               @relation(fields: [personnelId], references: [id])
  outsourceShipmentItem outsourceShipmentItem[]
  outsourceConfirmation outsourceConfirmation[]
}

model outsourceShipment {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  personnelId       Int
  sentDate          DateTime?
  outsourceOrderId  Int
  closed            Boolean   @default(false)
  shippingCompanyId Int?
  shippingCarrierId Int?
  shippingCarId     Int?

  // Relations
  outsourceOrder        outsourceOrder          @relation(fields: [outsourceOrderId], references: [id])
  personnel             personnel               @relation(fields: [personnelId], references: [id])
  outsourceShipmentItem outsourceShipmentItem[]
  shippingCompany       shippingCompany?        @relation(fields: [shippingCompanyId], references: [id])
  shippingCarrier       shippingCarrier?        @relation(fields: [shippingCarrierId], references: [id])
  shippingCar           shippingCar?            @relation(fields: [shippingCarId], references: [id])
}

model outsourceShipmentItem {
  id                   Int   @id @default(autoincrement())
  outsourceShipmentId  Int
  outsourceOrderItemId Int
  stockId              Int
  personnelId          Int
  meter                Float
  kg                   Float
  count                Int

  // Relations
  stock              stock              @relation(fields: [stockId], references: [id])
  outsourceOrderItem outsourceOrderItem @relation(fields: [outsourceOrderItemId], references: [id])
  personnel          personnel          @relation(fields: [personnelId], references: [id])
  outsourceShipment  outsourceShipment  @relation(fields: [outsourceShipmentId], references: [id])
}

model outsourceConfirmation {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  outsourceOrderItemId Int
  stockId              Int
  meter                Float
  kg                   Float
  count                Int
  personnelId          Int

  // relations
  outsourceOrderItem outsourceOrderItem @relation(fields: [outsourceOrderItemId], references: [id])
  stock              stock              @relation(fields: [stockId], references: [id])
  personnel          personnel          @relation(fields: [personnelId], references: [id])
}

// Order Section
model itemType {
  id   Int    @id @default(autoincrement())
  name String
}

model order {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  description       String?
  personnelId       Int
  closed            Boolean             @default(false)
  customerId        Int
  // Relations
  personnel         personnel           @relation(fields: [personnelId], references: [id])
  customer          customer            @relation(fields: [customerId], references: [id])
  orderItem         orderItem[]
  orderShipment     orderShipment[]
  customerComplaint customerComplaint[]
  offer             offer[]
}

model orderItem {
  id                Int         @id @default(autoincrement())
  orderId           Int
  productId         Int
  dyeColorId        Int?
  laminationColorId Int?
  itemType          stockStatus
  description       String?
  personnelId       Int
  meter             Float
  kg                Float

  // Relations
  order                     order                       @relation(fields: [orderId], references: [id])
  product                   product                     @relation(fields: [productId], references: [id])
  dyeColor                  dyeColor?                   @relation(fields: [dyeColorId], references: [id])
  laminationColor           laminationColor?            @relation(fields: [laminationColorId], references: [id])
  orderShipmentItem         orderShipmentItem[]
  offerItem                 offerItem[]
  orderItemSpecification    orderItemSpecification[]
  orderShipmentConfirmation orderShipmentConfirmation[]
}

model orderItemSpecification {
  id              Int @id @default(autoincrement())
  orderItemId     Int
  outsourceTypeId Int

  // Relations
  orderItem     orderItem     @relation(fields: [orderItemId], references: [id])
  outsourceType outsourceType @relation(fields: [outsourceTypeId], references: [id])

  @@unique([orderItemId, outsourceTypeId])
}

model shippingCompany {
  id                Int                 @id @default(autoincrement())
  name              String
  shippingCarrier   shippingCarrier[]
  shippingCar       shippingCar[]
  orderShipment     orderShipment[]
  yarnOrderShipment yarnOrderShipment[]
  purchaseDelivery  purchaseDelivery[]
  dyeShipment       dyeShipment[]
  outsourceShipment outsourceShipment[]
}

model shippingCarrier {
  id                Int     @id @default(autoincrement())
  shippingCompanyId Int
  name              String
  identityNo        String?
  phone             String?
  email             String?
  address           String?
  note              String?

  // Relations
  shippingCompany   shippingCompany     @relation(fields: [shippingCompanyId], references: [id])
  orderShipment     orderShipment[]
  yarnOrderShipment yarnOrderShipment[]
  purchaseDelivery  purchaseDelivery[]
  dyeShipment       dyeShipment[]
  outsourceShipment outsourceShipment[]
}

model shippingCar {
  id                Int    @id @default(autoincrement())
  shippingCompanyId Int
  plate             String

  // Relations
  shippingCompany   shippingCompany     @relation(fields: [shippingCompanyId], references: [id])
  orderShipment     orderShipment[]
  yarnOrderShipment yarnOrderShipment[]
  purchaseDelivery  purchaseDelivery[]
  dyeShipment       dyeShipment[]
  outsourceShipment outsourceShipment[]
}

model orderShipment {
  id                Int       @id @default(autoincrement())
  orderId           Int
  createdAt         DateTime  @default(now())
  sentDate          DateTime?
  shippingCompanyId Int?
  shippingCarrierId Int?
  shippingCarId     Int?
  closed            Boolean   @default(false)
  personnelId       Int

  // Relations
  order                     order                       @relation(fields: [orderId], references: [id])
  shippingCompany           shippingCompany?            @relation(fields: [shippingCompanyId], references: [id])
  shippingCarrier           shippingCarrier?            @relation(fields: [shippingCarrierId], references: [id])
  shippingCar               shippingCar?                @relation(fields: [shippingCarId], references: [id])
  orderShipmentItem         orderShipmentItem[]
  personnel                 personnel                   @relation(fields: [personnelId], references: [id])
  orderShipmentConfirmation orderShipmentConfirmation[]
}

model orderShipmentItem {
  id              Int           @id @default(autoincrement())
  orderShipmentId Int
  orderItemId     Int
  personnelId     Int
  meter           Float
  kg              Float
  lot             String?
  // Relations
  personnel       personnel     @relation(fields: [personnelId], references: [id])
  orderShipment   orderShipment @relation(fields: [orderShipmentId], references: [id])
  orderItem       orderItem     @relation(fields: [orderItemId], references: [id])
}

model orderShipmentConfirmation {
  id              Int    @id @default(autoincrement())
  orderItemId     Int
  orderShipmentId Int
  personnelId     Int
  // from stock
  stockId         Int
  sentMeter       Float
  sentKg          Float
  lot             String
  barcode         String

  // Relations
  orderShipment orderShipment @relation(fields: [orderShipmentId], references: [id])
  orderItem     orderItem     @relation(fields: [orderItemId], references: [id])
  personnel     personnel     @relation(fields: [personnelId], references: [id])

  stock stock @relation(fields: [stockId], references: [id])
}

model dofiRequest {
  id                       Int       @id @default(autoincrement())
  createdAt                DateTime  @default(now())
  reason                   String // Tedarikçi, Müşteri, İç Tetkik, Diğer
  fromPersonnelId          Int
  toPersonnelId            Int
  followedPersonnelId      Int?
  date                     DateTime
  nonconformityDescription String
  plannedCorrectiveActions String?
  dueDate                  DateTime?
  resultsAndComments       String?
  closureDate              DateTime?

  // Relations
  fromPersonnel     personnel  @relation("fromPersonnelRelation", fields: [fromPersonnelId], references: [id])
  toPersonnel       personnel  @relation("toPersonnelRelation", fields: [toPersonnelId], references: [id])
  followedPersonnel personnel? @relation("followedPersonnelRelation", fields: [followedPersonnelId], references: [id])
}

model log {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  personnelId Int
  action      String
  description String
  // Relations
  personnel   personnel @relation(fields: [personnelId], references: [id])
}

enum NotificationCategory {
  General
  Customer
  Personnel
  Product
  Order
  Offer
  Dye
  Outsource
  Yarn
  Wrap
  Production
  Account
  Stock
  Machine
  Dofi
  Log
}

model notification {
  id          Int                  @id @default(autoincrement())
  createdAt   DateTime             @default(now())
  category    NotificationCategory
  personnelId Int
  title       String
  description String
  link        String?
  read        Boolean              @default(false)
  // Relations
  personnel   personnel            @relation(fields: [personnelId], references: [id])
}

enum issueStatus {
  Open
  InProgress
  Closed
}

model reportIssue {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  personnelId Int
  title       String
  description String
  status      issueStatus
  response    String?
  closedDate  DateTime?
  // Relations
  personnel   personnel   @relation(fields: [personnelId], references: [id])
}

model supplier {
  id                     Int       @id @default(autoincrement())
  name                   String
  accountId              Int
  materials              String
  foreign                Boolean   @default(false)
  suitable               Boolean?  @default(false)
  supplierScore          Int
  approved               Boolean?  @default(false)
  evaluationDate         DateTime
  createdAt              DateTime  @default(now())
  entryScore             Int?
  maxApprovalDate        DateTime?
  contractType           String?
  contractDate           DateTime?
  contractValidityPeriod Int?
  selfPickup             Boolean?
  address                String
  phone                  String?
  email                  String?
  authorizedPerson       String?
  authorizedPersonPhone  String?
  authorizedPersonEmail  String?
  taxOfficeId            Int?
  taxNumber              String?
  vade                   Int?
  iso9001Status          Boolean   @default(false)
  iso14001Status         Boolean   @default(false)
  iso45001Status         Boolean   @default(false)

  // relations
  account            account              @relation(fields: [accountId], references: [id])
  taxOffice          taxOffice?           @relation(fields: [taxOfficeId], references: [id])
  materialPrice      materialPrice[]
  purchaseOrder      purchaseOrder[]
  supplierEvaluation supplierEvaluation[]
  dyeOrder           dyeOrder[]
  outsourceOrder     outsourceOrder[]
}

model supplierEvaluation {
  id            Int      @id @default(autoincrement())
  supplierId    Int
  createdAt     DateTime @default(now())
  personnelId   Int
  location      String
  locationScore Int      @default(0)

  pricing      String
  pricingScore Int    @default(0)

  payment      String
  paymentScore Int    @default(0)

  packaging      String
  packagingScore Int    @default(0)

  skill      String
  skillScore Int    @default(0)

  financial      String
  financialScore Int    @default(0)

  flexibilityDescription String
  flexibilityScore       Int    @default(0)

  legalRequirements      String
  legalRequirementsScore Int    @default(0)

  afterSalesService      String?
  afterSalesServiceScore Int     @default(0)

  qualitySystemDocument      String?
  qualitySystemDocumentScore Int     @default(0)

  // relations
  supplier  supplier  @relation(fields: [supplierId], references: [id])
  personnel personnel @relation(fields: [personnelId], references: [id])
}

model materialCategory {
  id               Int                @id @default(autoincrement())
  parentCategoryId Int?
  name             String             @unique
  material         material[]
  // relations
  parentCategory   materialCategory?  @relation("ParentCategoryRelation", fields: [parentCategoryId], references: [id])
  childCategory    materialCategory[] @relation("ParentCategoryRelation")
}

enum materialUnit {
  kg
  metre
  adet
  litre
  paket
  kutu
  ton
  koli
}

model material {
  id         Int          @id @default(autoincrement())
  // will include name of the material, type of the material, unit of the material
  name       String       @unique
  unit       materialUnit
  categoryId Int

  // Relations
  materialCategory  materialCategory    @relation(fields: [categoryId], references: [id])
  materialPrice     materialPrice[]
  purchaseOrderItem purchaseOrderItem[]
  materialStock     materialStock[]
}

model materialPrice {
  id          Int      @id @default(autoincrement())
  // will include id of the material, price of the material, currency of the price, date of the price, account of the seller
  createdAt   DateTime @default(now())
  materialId  Int
  price       Float
  vade        Int?
  vatIncluded Boolean  @default(false)
  currencyId  Int
  supplierId  Int
  // Relations
  material    material @relation(fields: [materialId], references: [id])
  currency    currency @relation(fields: [currencyId], references: [id])
  supplier    supplier @relation(fields: [supplierId], references: [id])
}

model warehouse {
  id                Int    @id @default(autoincrement())
  // will include name of the warehouse, address of the warehouse, personnel responsible for the warehouse
  name              String
  address           String
  personnelId       Int
  parentWarehouseId Int?

  // relations
  personnel       personnel        @relation(fields: [personnelId], references: [id])
  parentWarehouse warehouse?       @relation("WarehouseRelation", fields: [parentWarehouseId], references: [id])
  childWarehouse  warehouse[]      @relation("WarehouseRelation")
  materialStock   materialStock[]
  yarnStockEntry  yarnStockEntry[]
}

model materialStock {
  id                  Int          @id @default(autoincrement())
  // will include id of the material, id of the warehouse, amount of the material, unit of the material, date of the stock, 
  // purchase order id, purchase order item id, personnel who added the stock, and if moved which stock it was moved from, and personnel who moved the stock
  materialId          Int
  warehouseId         Int?
  quantity            Float
  unit                materialUnit
  createdAt           DateTime     @default(now())
  purchaseOrderItemId Int?
  personnelId         Int
  movedFromStockId    Int?
  movedPersonnelId    Int?

  // relations
  material          material           @relation(fields: [materialId], references: [id])
  warehouse         warehouse?         @relation(fields: [warehouseId], references: [id])
  purchaseOrderItem purchaseOrderItem? @relation(fields: [purchaseOrderItemId], references: [id])
  personnel         personnel          @relation(fields: [personnelId], references: [id])
  movedFromStock    materialStock?     @relation("MovedFromStockRelation", fields: [movedFromStockId], references: [id])
  movedPersonnel    personnel?         @relation("MovedPersonnelRelation", fields: [movedPersonnelId], references: [id])

  materialStock materialStock[] @relation("MovedFromStockRelation")
}

model purchaseRequest {
  id                         Int                   @id @default(autoincrement())
  createdAt                  DateTime              @default(now())
  department                 department
  personnelId                Int
  approvalFromSupervisor     Boolean?
  approvalFromSupervisorDate DateTime?
  approvalFromPurchasing     Boolean?
  approvalFromPurchasingDate DateTime?
  // will include date, personnel who requested, personnel who resulted, management approval, status, description
  //Relations
  personnel                  personnel             @relation(fields: [personnelId], references: [id])
  purchaseRequestItem        purchaseRequestItem[]

  purchaseOrder purchaseOrder[]
}

model purchaseRequestItem {
  id                 Int             @id @default(autoincrement())
  createdAt          DateTime        @default(now())
  purchaseRequestId  Int
  material           String
  quantity           Float
  originalQuantity   Float
  supervisorQuantity Float?
  purchasingQuantity Float?
  unit               materialUnit
  requestedDate      DateTime
  description        String?
  // will include purchase request id, material id, quantity
  purchaseRequest    purchaseRequest @relation(fields: [purchaseRequestId], references: [id])
}

enum purchaseOrderStatus {
  Pending
  Approved
  Rejected
  Cancelled
  Completed
  Returned
}

model purchaseOrder {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  personnelId       Int
  supplierId        Int
  purchaseRequestId Int
  purchaseType      String
  vade              Int?
  shippingType      String?
  deadline          DateTime
  requiresApproval  Boolean             @default(true)
  approved          Boolean             @default(false)
  approvedDate      DateTime?
  status            purchaseOrderStatus @default(Pending)
  // will include purchase request id, account from where we make the order, date, personnel who created the order, status, description, due date
  purchaseDelivery  purchaseDelivery[]
  // relations
  personnel         personnel           @relation(fields: [personnelId], references: [id])
  purchaseRequest   purchaseRequest     @relation(fields: [purchaseRequestId], references: [id])
  purchaseOrderItem purchaseOrderItem[]
  supplier          supplier            @relation(fields: [supplierId], references: [id])
}

model packagingType {
  id                Int                 @id @default(autoincrement())
  name              String
  purchaseOrderItem purchaseOrderItem[]
}

model purchaseOrderItem {
  id              Int          @id @default(autoincrement())
  purchaseOrderId Int
  materialId      Int
  quantity        Float
  personnelId     Int
  unit            materialUnit
  pricePerUnit    Float?
  currencyId      Int?
  vat             Float?
  packagingTypeId Int?
  specification   String?
  description     String?

  // will include material id, purchase order id, quantity, personnel who added the item
  // relations
  purchaseOrder        purchaseOrder          @relation(fields: [purchaseOrderId], references: [id])
  material             material               @relation(fields: [materialId], references: [id])
  personnel            personnel              @relation(fields: [personnelId], references: [id])
  currency             currency?              @relation(fields: [currencyId], references: [id])
  packagingType        packagingType?         @relation(fields: [packagingTypeId], references: [id])
  purchaseDeliveryItem purchaseDeliveryItem[]
  materialStock        materialStock[]
}

model purchaseOrderReturn {
  id Int @id @default(autoincrement())

  // will include purhcase order, date, personnel who created the return
}

model purchaseOrderReturnItem {
  id Int @id @default(autoincrement())

  // will include return id, reason, orderItem id, quantity, personnel who added the return item
}

model purchaseDelivery {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  purchaseOrderId   Int
  date              DateTime
  personnelId       Int
  deliveryNo        String?
  freightType       String?
  deliveryType      String?
  carId             Int?
  shippingCarrierId Int?
  shippingCompanyId Int?
  km                Int?
  kmPrice           Float?
  cost              Float?
  description       String?
  // will include purchase order id, date, personnel who accepted the delivery

  // relations
  purchaseOrder        purchaseOrder          @relation(fields: [purchaseOrderId], references: [id])
  personnel            personnel              @relation(fields: [personnelId], references: [id])
  shippingCarrier      shippingCarrier?       @relation(fields: [shippingCarrierId], references: [id])
  shippingCar          shippingCar?           @relation(fields: [carId], references: [id])
  shippingCompany      shippingCompany?       @relation(fields: [shippingCompanyId], references: [id])
  purchaseDeliveryItem purchaseDeliveryItem[]
}

model purchaseDeliveryItem {
  id                  Int               @id @default(autoincrement())
  purchaseDeliveryId  Int
  purchaseOrderItemId Int
  quantity            Float
  personnelId         Int
  description         String?
  // will include delivery accept id, order item id, quantity, personnel who accepted the item
  purchaseDelivery    purchaseDelivery  @relation(fields: [purchaseDeliveryId], references: [id])
  purchaseOrderItem   purchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id])
  personnel           personnel         @relation(fields: [personnelId], references: [id])
}
